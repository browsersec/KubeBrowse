apiVersion: batch/v1
kind: Job
metadata:
  name: kubebrowse-migration
  namespace: browser-sandbox
  labels:
    app: kubebrowse-migration
spec:
  template:
    metadata:
      labels:
        app: kubebrowse-migration
    spec:
      restartPolicy: Never
      containers:
      - name: migrate
        image: migrate/migrate:v4.17.0
        command:
        - migrate
        - -path
        - /migrations
        - -database
        - $(DATABASE_URL)
        - up
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: kubebrowse-secrets
              key: database-url
        volumeMounts:
        - name: migrations
          mountPath: /migrations
          readOnly: true
      volumes:
      - name: migrations
        configMap:
          name: kubebrowse-migrations
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubebrowse-migrations
  namespace: browser-sandbox
data:
  000001_create_users_table.up.sql: |
    CREATE TABLE IF NOT EXISTS users (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      username VARCHAR(255) UNIQUE,
      email VARCHAR(255) NOT NULL UNIQUE,
      password_hash VARCHAR(255),
      provider VARCHAR(50) DEFAULT 'email',
      provider_id VARCHAR(255),
      avatar_url VARCHAR(500),
      name VARCHAR(255),
      created_at TIMESTAMP NOT NULL DEFAULT NOW(),
      updated_at TIMESTAMP NOT NULL DEFAULT NOW()
    );

    CREATE TABLE IF NOT EXISTS user_sessions (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      session_token VARCHAR(255) NOT NULL UNIQUE,
      expires_at TIMESTAMP NOT NULL,
      created_at TIMESTAMP NOT NULL DEFAULT NOW(),
      updated_at TIMESTAMP NOT NULL DEFAULT NOW()
    );

    CREATE INDEX IF NOT EXISTS idx_user_sessions_token ON user_sessions(session_token);
    CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);
    CREATE INDEX IF NOT EXISTS idx_user_sessions_expires_at ON user_sessions(expires_at);
    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
    CREATE INDEX IF NOT EXISTS idx_users_provider ON users(provider, provider_id);

  000001_create_users_table.down.sql: |
    DROP INDEX IF EXISTS idx_users_provider;
    DROP INDEX IF EXISTS idx_users_email;
    DROP INDEX IF EXISTS idx_user_sessions_expires_at;
    DROP INDEX IF EXISTS idx_user_sessions_user_id;
    DROP INDEX IF EXISTS idx_user_sessions_token;
    DROP TABLE IF EXISTS user_sessions;
    DROP TABLE IF EXISTS users;

  000002_add_email_verification.up.sql: |
    -- Add email verification fields to users table
    ALTER TABLE users 
    ADD COLUMN IF NOT EXISTS email_verified BOOLEAN DEFAULT FALSE,
    ADD COLUMN IF NOT EXISTS email_verification_token VARCHAR(255),
    ADD COLUMN IF NOT EXISTS email_verification_expires_at TIMESTAMP;

    -- Create indexes for the new columns
    CREATE INDEX IF NOT EXISTS idx_users_email_verification_token ON users(email_verification_token);
    CREATE INDEX IF NOT EXISTS idx_users_email_verified ON users(email_verified);

    -- Set email_verified to TRUE for existing OAuth users (they don't need email verification)
    UPDATE users 
    SET email_verified = TRUE 
    WHERE provider != 'email' OR provider IS NULL;

    -- Set email_verified to TRUE for existing email users (backward compatibility)
    UPDATE users 
    SET email_verified = TRUE 
    WHERE provider = 'email' AND (email_verified = FALSE OR email_verified IS NULL);

  000002_add_email_verification.down.sql: |
    -- Remove email verification fields from users table
    DROP INDEX IF EXISTS idx_users_email_verification_token;
    DROP INDEX IF EXISTS idx_users_email_verified;

    ALTER TABLE users 
    DROP COLUMN IF EXISTS email_verified,
    DROP COLUMN IF EXISTS email_verification_token,
    DROP COLUMN IF EXISTS email_verification_expires_at;