name: Go

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: '^1.23'

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: go build -v .

    - name: Test
      run: go test -race -v .
      
  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    # Only run on pushes to master or on tag pushes
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short
          
      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # - name: Display Docker Image Size
      #   run: |
      #     echo "Tags generated by metadata-action: '${{ steps.meta.outputs.tags }}'"
      #     if [ -z "${{ steps.meta.outputs.tags }}" ]; then
      #       echo "Error: No tags generated. Verify the metadata-action configuration."
      #       exit 1
      #     fi
      #     PRIMARY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
      #     echo "Pulling image: ${PRIMARY_TAG}"
      #     if ! docker pull ${PRIMARY_TAG}; then
      #       echo "Error pulling Docker image with tag: ${PRIMARY_TAG}"
      #       exit 1
      #     fi
      #     echo "Image size details:"
      #     docker image ls --format "{{.Repository}}:{{.Tag}} - {{.Size}}" | grep -E "${IMAGE_NAME//\//.+}"
      #     echo "Complete image list:"
      #     docker image ls