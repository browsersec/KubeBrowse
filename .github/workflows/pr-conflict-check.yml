name: Check PR for Merge Conflicts

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main  # Also run when main is updated to detect new conflicts in open PRs

permissions:
  contents: read
  pull-requests: write

jobs:
  check_conflicts:
    name: Check for merge conflicts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Check for merge conflicts with main
        if: github.event_name == 'pull_request'
        run: |
          # Setup Git identity for operations (required by Git)
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          
          # Fetch the latest main branch
          git fetch origin main:main
          
          # Attempt to merge with main without committing
          if ! git merge --no-commit --no-ff main; then
            echo "::error::⚠️ Merge conflict detected! This PR has conflicts with the main branch that need to be resolved before it can be merged."
            echo "::group::Conflicting files:"
            git diff --name-only --diff-filter=U
            echo "::endgroup::"
            exit 1
          else
            echo "✅ No merge conflicts detected with main branch!"
            # Abort the merge to clean up
            if [ -d ".git/MERGE_HEAD" ]; then
              git merge --abort
            fi
          fi

      - name: Add comment to PR if conflict detected
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const conflictingFiles = require('child_process')
              .execSync('git diff --name-only --diff-filter=U')
              .toString().trim().split('\n')
              .filter(file => file.length > 0);
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ⚠️ Merge Conflict Detected\n\nThis PR has conflicts with the main branch that need to be resolved before it can be merged.\n\n### Conflicting files:\n${conflictingFiles.join('\n')}`
            });