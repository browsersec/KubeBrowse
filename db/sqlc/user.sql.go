// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createEmailUser = `-- name: CreateEmailUser :one
INSERT INTO users (
  email, password_hash, provider, email_verification_token, email_verification_expires_at
) VALUES (
  $1, $2, 'email', $3, $4
)
RETURNING id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type CreateEmailUserParams struct {
	Email                      string         `json:"email"`
	PasswordHash               sql.NullString `json:"password_hash"`
	EmailVerificationToken     sql.NullString `json:"email_verification_token"`
	EmailVerificationExpiresAt sql.NullTime   `json:"email_verification_expires_at"`
}

func (q *Queries) CreateEmailUser(ctx context.Context, arg CreateEmailUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createEmailUser,
		arg.Email,
		arg.PasswordHash,
		arg.EmailVerificationToken,
		arg.EmailVerificationExpiresAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOAuthUser = `-- name: CreateOAuthUser :one
INSERT INTO users (
  email, provider, provider_id, avatar_url, name, username, password_hash
) VALUES (
  $1, $2, $3, $4, $5, $6, NULL
)
RETURNING id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type CreateOAuthUserParams struct {
	Email      string         `json:"email"`
	Provider   sql.NullString `json:"provider"`
	ProviderID sql.NullString `json:"provider_id"`
	AvatarUrl  sql.NullString `json:"avatar_url"`
	Name       sql.NullString `json:"name"`
	Username   sql.NullString `json:"username"`
}

func (q *Queries) CreateOAuthUser(ctx context.Context, arg CreateOAuthUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createOAuthUser,
		arg.Email,
		arg.Provider,
		arg.ProviderID,
		arg.AvatarUrl,
		arg.Name,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (
  user_id, session_token, expires_at
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, session_token, expires_at, created_at, updated_at
`

type CreateSessionParams struct {
	UserID       uuid.UUID `json:"user_id"`
	SessionToken string    `json:"session_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

// Session management queries
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.UserID, arg.SessionToken, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, email, password_hash, provider, provider_id, avatar_url, name
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type CreateUserParams struct {
	Username     sql.NullString `json:"username"`
	Email        string         `json:"email"`
	PasswordHash sql.NullString `json:"password_hash"`
	Provider     sql.NullString `json:"provider"`
	ProviderID   sql.NullString `json:"provider_id"`
	AvatarUrl    sql.NullString `json:"avatar_url"`
	Name         sql.NullString `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Provider,
		arg.ProviderID,
		arg.AvatarUrl,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM user_sessions
WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM user_sessions
WHERE session_token = $1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, sessionToken)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE FROM user_sessions
WHERE user_id = $1
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserSessions, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT s.id, s.user_id, s.session_token, s.expires_at, s.created_at, s.updated_at, u.email, u.username, u.name, u.avatar_url, u.provider
FROM user_sessions s
JOIN users u ON s.user_id = u.id
WHERE s.session_token = $1 AND s.expires_at > NOW()
LIMIT 1
`

type GetSessionRow struct {
	ID           uuid.UUID      `json:"id"`
	UserID       uuid.UUID      `json:"user_id"`
	SessionToken string         `json:"session_token"`
	ExpiresAt    time.Time      `json:"expires_at"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
	Email        string         `json:"email"`
	Username     sql.NullString `json:"username"`
	Name         sql.NullString `json:"name"`
	AvatarUrl    sql.NullString `json:"avatar_url"`
	Provider     sql.NullString `json:"provider"`
}

func (q *Queries) GetSession(ctx context.Context, sessionToken string) (GetSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getSession, sessionToken)
	var i GetSessionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.Name,
		&i.AvatarUrl,
		&i.Provider,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmailVerificationToken = `-- name: GetUserByEmailVerificationToken :one
SELECT id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at FROM users
WHERE email_verification_token = $1 AND email_verification_expires_at > NOW()
LIMIT 1
`

// Email verification queries
func (q *Queries) GetUserByEmailVerificationToken(ctx context.Context, emailVerificationToken sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailVerificationToken, emailVerificationToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProvider = `-- name: GetUserByProvider :one
SELECT id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at FROM users
WHERE provider = $1 AND provider_id = $2 LIMIT 1
`

type GetUserByProviderParams struct {
	Provider   sql.NullString `json:"provider"`
	ProviderID sql.NullString `json:"provider_id"`
}

func (q *Queries) GetUserByProvider(ctx context.Context, arg GetUserByProviderParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProvider, arg.Provider, arg.ProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at FROM users
ORDER BY created_at
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.Provider,
			&i.ProviderID,
			&i.AvatarUrl,
			&i.Name,
			&i.EmailVerified,
			&i.EmailVerificationToken,
			&i.EmailVerificationExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resendEmailVerification = `-- name: ResendEmailVerification :one
UPDATE users
SET email_verification_token = $2, email_verification_expires_at = $3, updated_at = NOW()
WHERE email = $1 AND email_verified = FALSE
RETURNING id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type ResendEmailVerificationParams struct {
	Email                      string         `json:"email"`
	EmailVerificationToken     sql.NullString `json:"email_verification_token"`
	EmailVerificationExpiresAt sql.NullTime   `json:"email_verification_expires_at"`
}

func (q *Queries) ResendEmailVerification(ctx context.Context, arg ResendEmailVerificationParams) (User, error) {
	row := q.db.QueryRowContext(ctx, resendEmailVerification, arg.Email, arg.EmailVerificationToken, arg.EmailVerificationExpiresAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEmailVerificationToken = `-- name: UpdateEmailVerificationToken :one
UPDATE users
SET email_verification_token = $2, email_verification_expires_at = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type UpdateEmailVerificationTokenParams struct {
	ID                         uuid.UUID      `json:"id"`
	EmailVerificationToken     sql.NullString `json:"email_verification_token"`
	EmailVerificationExpiresAt sql.NullTime   `json:"email_verification_expires_at"`
}

func (q *Queries) UpdateEmailVerificationToken(ctx context.Context, arg UpdateEmailVerificationTokenParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateEmailVerificationToken, arg.ID, arg.EmailVerificationToken, arg.EmailVerificationExpiresAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2, email = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type UpdateUserParams struct {
	ID       uuid.UUID      `json:"id"`
	Username sql.NullString `json:"username"`
	Email    string         `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password_hash = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID      `json:"id"`
	PasswordHash sql.NullString `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET username = $2, name = $3, avatar_url = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type UpdateUserProfileParams struct {
	ID        uuid.UUID      `json:"id"`
	Username  sql.NullString `json:"username"`
	Name      sql.NullString `json:"name"`
	AvatarUrl sql.NullString `json:"avatar_url"`
}

// Profile and settings management queries
func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile,
		arg.ID,
		arg.Username,
		arg.Name,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserSettings = `-- name: UpdateUserSettings :one
UPDATE users
SET username = $2, name = $3, avatar_url = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type UpdateUserSettingsParams struct {
	ID        uuid.UUID      `json:"id"`
	Username  sql.NullString `json:"username"`
	Name      sql.NullString `json:"name"`
	AvatarUrl sql.NullString `json:"avatar_url"`
}

func (q *Queries) UpdateUserSettings(ctx context.Context, arg UpdateUserSettingsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserSettings,
		arg.ID,
		arg.Username,
		arg.Name,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyUserEmail = `-- name: VerifyUserEmail :one
UPDATE users
SET email_verified = TRUE, email_verification_token = NULL, email_verification_expires_at = NULL, updated_at = NOW()
WHERE email_verification_token = $1 AND email_verification_expires_at > NOW()
RETURNING id, username, email, password_hash, provider, provider_id, avatar_url, name, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

func (q *Queries) VerifyUserEmail(ctx context.Context, emailVerificationToken sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, verifyUserEmail, emailVerificationToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Provider,
		&i.ProviderID,
		&i.AvatarUrl,
		&i.Name,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
